// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // o el proveedor de base de datos que estés usando
  url      = env("DATABASE_URL")
}
// Aqui van los modelos:
// Modelo Person
model Person {
  id             Int           @id @default(autoincrement())
  dni            String        @unique @db.VarChar(13)
  firstName      String        @db.VarChar(45)
  middleName     String?       @db.VarChar(45)
  lastName       String        @db.VarChar(45)
  secondLastName String?       @db.VarChar(45)
  phoneNumber    String        @db.VarChar(20)
  email          String        @unique @db.VarChar(100)
  user           User?
  inscriptions   Inscription[]
}

enum TypeCareerEnum {
  TRIMESTRAL
  SEMESTRAL
}

// Modelo Career
model Career {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @db.VarChar(50)
  active                  Boolean                 @default(true)
  createdAt               DateTime                @default(now()) @db.Date
  description             String?                 @db.VarChar(100)
  typeCareer              TypeCareerEnum?
  code                    String                  @unique @db.VarChar(45)
  admissionsTests         AdmissionTest_Career[]
  inscriptionsPrincipals  Inscription[]           @relation("principalCareer")
  inscriptionsSecondaries Inscription[]           @relation("secondaryCareer")
  regionalCentersCareers  RegionalCenter_Career[]
  regionalCenter_Faculty_Careers RegionalCenter_Faculty_Career[]
  departament  Departament?
  studyPlanes StudyPlan[]

  @@index([id], name: "pk_Career_idx")
}

// Modelo Inscription
model Inscription {
  id                Int      @id @default(autoincrement())
  principalCareerId Int
  secondaryCareerId Int
  photoCertificate  String   @db.VarChar(300)
  date              DateTime @default(now()) @db.Date
  personId          Int
  opinionId         Int?
  regionalCenterId  Int
  processId         Int
  notificated       Boolean  @default(false)
  process           Process  @relation(fields: [processId], references: [id], onDelete: Cascade)
  principalCareer   Career   @relation("principalCareer", fields: [principalCareerId], references: [id], onDelete: Cascade)
  secondaryCareer   Career   @relation("secondaryCareer", fields: [secondaryCareerId], references: [id], onDelete: Cascade)
  opinion           Opinion? @relation(fields: [opinionId], references: [id], onDelete: Cascade)
  person            Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  regionalCenter    RegionalCenter @relation(fields: [regionalCenterId], references: [id], onDelete: Cascade)
  results           Result[]

  @@index([principalCareerId], name: "fk_Inscription_Career1_idx")
  @@index([secondaryCareerId], name: "fk_Inscription_Career2_idx")
  @@index([personId], name: "fk_Inscription_Person1_idx")
}

// Modelo Centro Regional
model RegionalCenter_Career {
  id               Int       @id @default(autoincrement())
  careerId         Int
  regionalCenterId Int
  startDate        DateTime  @default(now()) @db.Date
  finalDate        DateTime?
  active           Boolean   @default(true)

  // Foreign keys
  career         Career         @relation(fields: [careerId], references: [id], onDelete: Cascade)
  regionalCenter RegionalCenter @relation(fields: [regionalCenterId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([regionalCenterId], name: "fk_Career_has_RegionalCenter_RegionalCenter1_idx")
  @@index([careerId], name: "fk_Faculty_has_RegionalCenter_Faculty1_idx")
}

// Modelo AdmissionTest
model AdmissionTest {
  id                   Int                    @id @default(autoincrement())
  minScoreApprove      Float?
  score                Float
  name                 String                 @db.VarChar(75)
  active               Boolean                @default(true)
  code                 String                 @unique @db.VarChar(7)
  admissionTestCareers AdmissionTest_Career[]
  results              Result[]
}

// Modelo AdmissionTest_Career
model AdmissionTest_Career {
  id              Int           @id @default(autoincrement())
  admissionTestId Int
  careerId        Int
  active          Boolean       @default(true)
  minScore        Float
  admissionTest   AdmissionTest @relation(fields: [admissionTestId], references: [id], onDelete: Cascade)
  career          Career        @relation(fields: [careerId], references: [id], onDelete: Cascade)

  @@index([careerId], name: "fk_AdmissionTest_has_Career_Career1_idx")
  @@index([admissionTestId], name: "fk_AdmissionTest_has_Career_AdmissionTest1_idx")
}

// Modelo Opinion
model Opinion {
  id           Int           @id @default(autoincrement())
  message      String        @db.VarChar(90)
  inscriptions Inscription[]
}

// Modelo Result
model Result {
  inscriptionId   Int
  admissionTestId Int
  score           Float?
  message         String?       @db.VarChar(18)
  date            DateTime?     @db.Date
  processId       Int       
  inscription     Inscription   @relation(fields: [inscriptionId], references: [id], onDelete: Cascade)
  admissionTest   AdmissionTest @relation(fields: [admissionTestId], references: [id], onDelete: Cascade)
  process         Process       @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@id([inscriptionId, admissionTestId])
  @@index([admissionTestId], name: "fk_Inscription_has_AdmissionTest_AdmissionTest1_idx")
  @@index([inscriptionId], name: "fk_Inscription_has_AdmissionTest_Inscription1_idx")
}

// Modelo CountryDepartment
model CountryDepartment {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(85)
  towns Town[]
}

// Modelo Town
model Town {
  id                  Int               @id @default(autoincrement())
  name                String            @db.VarChar(100)
  countryDepartmentId Int
  countryDepartment   CountryDepartment @relation(fields: [countryDepartmentId], references: [id], onDelete: Cascade)
  regionalCenters     RegionalCenter[]

  @@index([countryDepartmentId], name: "fk_Town_CountryDepartment1_idx")
}

// Modelo RegionalCenter
model RegionalCenter {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(100)
  date                  DateTime                @db.Date
  code                  String                  @db.VarChar(45) @unique
  finalDate             DateTime?               @db.Date
  townId                Int
  town                  Town                    @relation(fields: [townId], references: [id], onDelete: Cascade)
  regionalCentersCareer RegionalCenter_Career[]
  inscriptions          Inscription[]
  regionalCenter_Faculties RegionalCenter_Faculty[]
  buildings  Building[]

  @@index([townId], name: "fk_RegionalCenter_Town1_idx")
}

model ProcessType {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(65)

  processes Process[]
}

model Process {
  id            Int           @id @default(autoincrement())
  startDate     DateTime      
  finalDate     DateTime      
  active        Boolean       @default(true)
  processTypeId Int
  processId     Int?          
  inscriptions  Inscription[]
  results       Result[]
  subprocesses     Process[]   @relation("ProcessToSubprocess")
  parentProcess     Process?     @relation("ProcessToSubprocess",fields: [processId], references: [id], onDelete: Cascade)
  processType ProcessType @relation(fields: [processTypeId], references: [id], onDelete: Cascade)
  planning     Planning? @relation(fields: [planningId], references: [id], onDelete: Cascade)
  planningId  Int?
  academicPeriod AcademicPeriod?
  daysEnrolls DayEnroll[]

  @@index([processTypeId], name: "fk_Process_ProcessType1_idx")
}


model User {
  id            Int @id @default(autoincrement())
  identificationCode  String @unique @db.VarChar(15)
  personId      Int   @unique
  active        Boolean @default(true)
  institutionalEmail String @unique @db.VarChar(100)
  password       String  @db.VarChar(100)
  verified       Boolean @default(false)
  
  description   String? @db.VarChar(200)
  roleId        Int

  images      Image[]
  token       UserToken?
  student     Student?
  person      Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  role        Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  sections    Section[]

  carrers RegionalCenter_Faculty_Career_User[]
  carrersOptions OptionCareer[]
  teacherDepartments RegionalCenter_Faculty_Career_Department_Teacher[]

  @@index([personId], name: "fk_User_Person_idx")
  @@index([roleId], name: "fk_User_Role_idx")
}


model Image {
  idImage    Int      @id @default(autoincrement())
  publicId   String   @db.VarChar(200)
  url        String   @db.VarChar(250)
  userId    Int
  avatar     Boolean  @default(false)
  createdAt  DateTime @default(now()) // Campo adicional para la fecha de creación

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "fk_Image_User1_idx")
}


enum RoleEnum {
  ADMIN
  STUDENT
  TEACHER
  DEPARTMENT_HEAD
  COORDINATOR
}
model Role {
  id            Int @id @default(autoincrement())
  name          RoleEnum  @unique
  users         User[]
} 

model Student {
  id             Int                 @id @default(autoincrement())
  globalAverage  Float?              
  userId         Int                 @unique
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]

}

model UserToken {
  token       String @unique
  userId      Int @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@index([userId])
}

model Faculty {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(80)
  startDate   DateTime @db.Date @default(now())
  finalDate   DateTime? @db.Date
  active      Boolean  @default(true)
  regionalCenter_Faculties RegionalCenter_Faculty[]
}

model RegionalCenter_Faculty {
  faculty     Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  facultyId  Int
  regionalCenter RegionalCenter @relation(fields: [regionalCenterId], references: [id], onDelete: Cascade)
  regionalCenterId Int
  startDate   DateTime @db.Date @default(now())
  finalDate   DateTime? @db.Date
  active      Boolean  @default(true)
  @@id([facultyId, regionalCenterId])
  regionalCenter_Faculty_Careers RegionalCenter_Faculty_Career[]
}

model RegionalCenter_Faculty_Career {
  id                         Int      @id @default(autoincrement())
  regionalCenter_Faculty     RegionalCenter_Faculty @relation(fields: [regionalCenter_Faculty_FacultyId, regionalCenter_Faculty_RegionalCenterId], references: [facultyId, regionalCenterId], onDelete: Cascade)
  regionalCenter_Faculty_FacultyId  Int
  regionalCenter_Faculty_RegionalCenterId Int
  career                     Career @relation(fields: [careerId], references: [id], onDelete: Cascade)
  careerId                  Int
  startDate                  DateTime @db.Date @default(now())
  finalDate                  DateTime? @db.Date
  active                     Boolean  @default(true)
  sections Section[]
  users RegionalCenter_Faculty_Career_User[]
  usersOptions OptionCareer[]
  departments RegionalCenter_Faculty_Career_Department[]

}

model Departament {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(80)
  createdAt    DateTime @db.Date @default(now())
  active       Boolean  @default(true)
  careerId    Int @unique
  career       Career   @relation(fields: [careerId], references: [id], onDelete: Cascade)
  classes      Class[]
  regionalCenterFacultyCareer RegionalCenter_Faculty_Career_Department[]

}

model Planning {
  id          Int      @id @default(autoincrement())
  description String?  @db.VarChar(100)
  year        Int    
  processes   Process[]
}

model Class {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(50)
  active       Boolean  @default(true)
  createdAt    DateTime @db.Date
  code         String   @unique @db.VarChar(45)
  UV           Int
  departament  Departament @relation(fields: [departamentId], references: [id], onDelete: Cascade)
  departamentId Int
  sections     Section[]
  
  studyPlan    StudyPlan_Class[] @relation("StudyPlanClass")
  prerequisiteClasses StudyPlan_Class[] @relation("PrerequisiteClass")

}

model Building {
  id          Int      @id @default(autoincrement())
  code        String   @db.VarChar(10)
  active      Boolean
  classrooms  Classroom[]
  regionalCenterId Int
  regionalCenter RegionalCenter @relation(fields: [regionalCenterId], references: [id], onDelete: Cascade)

}

model Classroom {
  id          Int      @id @default(autoincrement())
  code        String   @db.VarChar(10)
  floor       Int
  number      Int
  capacity    Int
  building    Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  buildingId Int
  Sections    Section[]
}

model Section {
  id            Int        @id @default(autoincrement())
  code          String     @unique @db.VarChar(20)
  capacity      Int
  IH            Int        
  FH            Int        
  active        Boolean    @default(true)
  class         Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId      Int
  regionalCenter_Faculty_CareerId Int 
  regionalCenter_Faculty_Career RegionalCenter_Faculty_Career @relation(fields: [regionalCenter_Faculty_CareerId], references: [id], onDelete: Cascade)
  teacherId Int
  teacher  User @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classroomId   Int
  classroom     Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade) 
  academicPeriodId    Int
  academicPeriod    AcademicPeriod @relation(fields: [academicPeriodId], references: [id], onDelete: Cascade)
  waitingList WaitingList?
  section_Day Section_Day[]
  enrollments   Enrollment[]
}

model AcademicPeriod {
  id           Int      @id @default(autoincrement())
  number       Int      
  process      Process @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId   Int       @unique
  sections     Section[]
}

model Enrollment {
  section      Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId   Int
  date         DateTime @db.Date @default(now())
  grade        Float?
  message      String?  @db.VarChar(45)
  student      Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   Int
  waitingList  WaitingList? @relation(fields: [waitingListId], references: [id], onDelete: Cascade)
  waitingListId Int?
  @@id([sectionId, studentId])
}

model WaitingList {
  id Int     @id @default(autoincrement())
  top Int    @default(autoincrement())
  sectionId  Int @unique
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  
}

enum DayEnum {
  LUNES
  MARTES
  MIERCOLES
  JUEVES
  VIERNES
  SABADO
  DOMINGO
}

model Day {
  id Int @id @default(autoincrement())
  name DayEnum @unique
  section_Day Section_Day[]
}
model Section_Day{
  sectionId   Int
  dayId  Int
  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  day Day @relation(fields: [dayId], references: [id], onDelete: Cascade)


  @@id([sectionId, dayId])
}


model RegionalCenter_Faculty_Career_User {
  id                             Int      @id @default(autoincrement())
  regionalCenter_Faculty_Career  RegionalCenter_Faculty_Career @relation(fields: [regionalCenter_Faculty_CareerId], references: [id], onDelete:  Cascade)
  regionalCenter_Faculty_CareerId Int
  user                           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                      Int
  startDate                      DateTime @db.Date @default(now())
  finalDate                      DateTime? @db.Date

  @@index([userId], name: "fk_RegionalCenter_Faculty_Career_has_User_User1_idx")
  @@index([regionalCenter_Faculty_CareerId], name: "fk_RegionalCenter_Faculty_Career_has_User_RegionalCenter_Fa_idx")
}


model OptionCareer {
  id                             Int      @id @default(autoincrement())
  regionalCenter_Faculty_Career  RegionalCenter_Faculty_Career @relation(fields: [regionalCenter_Faculty_CareerId], references: [id], onDelete: Cascade)
  regionalCenter_Faculty_CareerId Int
  user                           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                      Int
  date                      DateTime @db.Date @default(now())


  @@index([userId], name: "OptionCareer_has_User_User1_idx")
  @@index([regionalCenter_Faculty_CareerId], name: "OptionCareer_has_User_RegionalCenter_Fa_idx")
}

model DayEnroll {
  id            Int      @id @default(autoincrement())
  startDate          DateTime @db.Date
  finalDate          DateTime @db.Date
  globalAvarage Float
  process       Process  @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId    Int

  @@index([processId], name: "fk_DayEnroll_Process1_idx")
}

model StudyPlan {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now()) @db.Date
  finalDate DateTime?         @db.Date
  careerId  Int

  career    Career            @relation(fields: [careerId], references: [id], onDelete: Cascade)
  classes   StudyPlan_Class[]

  @@index([careerId], name: "fk_StudyPlan_Career1_idx")
}

model StudyPlan_Class {
  id                Int       @id @default(autoincrement())
  studyPlanId       Int
  classId           Int
  prerequisiteClassId Int?

  studyPlan         StudyPlan @relation(fields: [studyPlanId], references: [id], onDelete: Cascade)
  class             Class     @relation( "StudyPlanClass" ,fields: [classId], references: [id], onDelete: Cascade)
  prerequisite      Class?     @relation("PrerequisiteClass", fields: [prerequisiteClassId], references: [id], onDelete: Cascade)

  @@index([studyPlanId], name: "fk_StudyPlan_has_Class_StudyPlan1_idx")
  @@index([classId], name: "fk_StudyPlan_has_Class_Class1_idx")
  @@index([prerequisiteClassId], name: "fk_StudyPlan_Class_Class1_idx")
}

model RegionalCenter_Faculty_Career_Department {
  departmentId                          Int
  regionalCenter_Faculty_CareerId        Int
  active                                  Boolean  @default(true)
  RegionalCenterFacultyCareerDepartmentTeacher RegionalCenter_Faculty_Career_Department_Teacher[]

  Departament      Departament  @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  RegionalCenterFacultyCareer  RegionalCenter_Faculty_Career  @relation(fields: [regionalCenter_Faculty_CareerId], references: [id], onDelete: Cascade)

  @@id([departmentId, regionalCenter_Faculty_CareerId])
}

model RegionalCenter_Faculty_Career_Department_Teacher {
  teacherId Int
  regionalCenter_Faculty_Career_Department_Departament_id Int
  regionalCenter_Faculty_Career_Department_RegionalCenter_Faculty_Career_id Int
  active Boolean @default(true)

  teacher User @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  regionalCenterFacultyCareerDepartment RegionalCenter_Faculty_Career_Department @relation(fields: [regionalCenter_Faculty_Career_Department_Departament_id, regionalCenter_Faculty_Career_Department_RegionalCenter_Faculty_Career_id], references: [departmentId, regionalCenter_Faculty_CareerId], onDelete: Cascade)

  @@id([teacherId, regionalCenter_Faculty_Career_Department_Departament_id, regionalCenter_Faculty_Career_Department_RegionalCenter_Faculty_Career_id])
}

