// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // o el proveedor de base de datos que est√©s usando
  url      = env("DATABASE_URL")
}


// Aqui van los modelos:
// Modelo Person
model Person {
  id             Int           @id @default(autoincrement())
  dni            String        @unique @db.VarChar(13)
  firstName      String        @db.VarChar(45)
  middleName     String?       @db.VarChar(45)
  lastName       String        @db.VarChar(45)
  secondLastName String?       @db.VarChar(45)
  phoneNumber    String        @db.VarChar(20)
  email          String        @unique @db.VarChar(100)
  user           User?
  inscriptions   Inscription[]
}

// Modelo Career
model Career {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @db.VarChar(50)
  active                  Boolean                 @default(true)
  createdAt               DateTime                @default(now()) @db.Date
  description             String?                 @db.VarChar(100)
  code                    String                  @unique @db.VarChar(45)
  admissionsTests         AdmissionTest_Career[]
  inscriptionsPrincipals  Inscription[]           @relation("principalCareer")
  inscriptionsSecondaries Inscription[]           @relation("secondaryCareer")
  regionalCentersCareers  RegionalCenter_Career[]

  @@index([id], name: "pk_Career_idx")
}

// Modelo Inscription
model Inscription {
  id                Int      @id @default(autoincrement())
  principalCareerId Int
  secondaryCareerId Int
  photoCertificate  String   @db.VarChar(300)
  date              DateTime @default(now()) @db.Date
  personId          Int
  opinionId         Int?
  regionalCenterId  Int
  processId         Int
  process           Process  @relation(fields: [processId], references: [id])
  principalCareer   Career   @relation("principalCareer", fields: [principalCareerId], references: [id], onDelete: Cascade)
  secondaryCareer   Career   @relation("secondaryCareer", fields: [secondaryCareerId], references: [id], onDelete: Cascade)
  opinion           Opinion? @relation(fields: [opinionId], references: [id], onDelete: Cascade)
  person            Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  regionalCenter    RegionalCenter @relation(fields: [regionalCenterId], references: [id], onDelete: Cascade)
  results           Result[]
  notificated     Boolean       @default(false)

  @@index([principalCareerId], name: "fk_Inscription_Career1_idx")
  @@index([secondaryCareerId], name: "fk_Inscription_Career2_idx")
  @@index([personId], name: "fk_Inscription_Person1_idx")
}

// Modelo Centro Regional
model RegionalCenter_Career {
  id               Int       @id @default(autoincrement())
  careerId         Int
  regionalCenterId Int
  startDate        DateTime  @default(now()) @db.Date
  finalDate        DateTime?
  active           Boolean   @default(true)
  regionalCenterCareerStudent RegionalCenter_Career_Student[]

  // Foreign keys
  career         Career         @relation(fields: [careerId], references: [id], onDelete: Cascade)
  regionalCenter RegionalCenter @relation(fields: [regionalCenterId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([regionalCenterId], name: "fk_Career_has_RegionalCenter_RegionalCenter1_idx")
  @@index([careerId], name: "fk_Faculty_has_RegionalCenter_Faculty1_idx")
}

// Modelo AdmissionTest
model AdmissionTest {
  id                   Int                    @id @default(autoincrement())
  minScoreApprove      Float?
  score                Float
  name                 String                 @db.VarChar(75)
  active               Boolean                @default(true)
  code                 String                 @unique @db.VarChar(7)
  admissionTestCareers AdmissionTest_Career[]
  results              Result[]
}

// Modelo AdmissionTest_Career
model AdmissionTest_Career {
  id              Int           @id @default(autoincrement())
  admissionTestId Int
  careerId        Int
  active          Boolean       @default(true)
  minScore        Float
  admissionTest   AdmissionTest @relation(fields: [admissionTestId], references: [id], onDelete: Cascade)
  career          Career        @relation(fields: [careerId], references: [id], onDelete: Cascade)

  @@index([careerId], name: "fk_AdmissionTest_has_Career_Career1_idx")
  @@index([admissionTestId], name: "fk_AdmissionTest_has_Career_AdmissionTest1_idx")
}

// Modelo Opinion
model Opinion {
  id           Int           @id @default(autoincrement())
  message      String        @db.VarChar(90)
  inscriptions Inscription[]
}

// Modelo Result
model Result {
  inscriptionId   Int
  admissionTestId Int
  score           Float?
  message         String?       @db.VarChar(18)
  date            DateTime?     @db.Date
  processId       Int       
  inscription     Inscription   @relation(fields: [inscriptionId], references: [id], onDelete: Cascade)
  admissionTest   AdmissionTest @relation(fields: [admissionTestId], references: [id], onDelete: Cascade)
  process         Process       @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@id([inscriptionId, admissionTestId])
  @@index([admissionTestId], name: "fk_Inscription_has_AdmissionTest_AdmissionTest1_idx")
  @@index([inscriptionId], name: "fk_Inscription_has_AdmissionTest_Inscription1_idx")
}

// Modelo CountryDepartment
model CountryDepartment {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(85)
  towns Town[]
}

// Modelo Town
model Town {
  id                  Int               @id @default(autoincrement())
  name                String            @db.VarChar(100)
  countryDepartmentId Int
  countryDepartment   CountryDepartment @relation(fields: [countryDepartmentId], references: [id], onDelete: Cascade)
  regionalCenters     RegionalCenter[]

  @@index([countryDepartmentId], name: "fk_Town_CountryDepartment1_idx")
}

// Modelo RegionalCenter
model RegionalCenter {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(100)
  date                  DateTime                @db.Date
  code                  String                  @db.VarChar(45)
  finalDate             DateTime?               @db.Date
  townId                Int
  town                  Town                    @relation(fields: [townId], references: [id], onDelete: Cascade)
  regionalCentersCareer RegionalCenter_Career[]
  inscriptions          Inscription[]

  @@index([townId], name: "fk_RegionalCenter_Town1_idx")
}

model ProcessType {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(65)

  processes Process[]
}

model Process {
  id            Int           @id @default(autoincrement())
  startDate     DateTime      @db.Date
  finalDate     DateTime      @db.Date
  active        Boolean       @default(true)
  processTypeId Int
  processId     Int?          
  inscriptions  Inscription[]
  results       Result[]
  subprocesses     Process[]   @relation("ProcessToSubprocess")
  parentProcess     Process?     @relation("ProcessToSubprocess",fields: [processId], references: [id], onDelete: Cascade)
  processType ProcessType @relation(fields: [processTypeId], references: [id], onDelete: Cascade)

  @@index([processTypeId], name: "fk_Process_ProcessType1_idx")
}


model User {
  id            Int @id @default(autoincrement())
  identificationCode  Int @unique
  personId      Int   @unique
  active        Boolean @default(true)
  institutionalEmail String @db.VarChar(100)
  password       String @unique @db.VarChar(100)
  verified       Boolean @default(false)
  avatar        String? @db.VarChar(200)
  img1          String? @db.VarChar(200)
  img2          String? @db.VarChar(200)
  img3          String? @db.VarChar(200)
  description   String? @db.VarChar(200)
  roleId        Int

  student     Student?
  person      Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  role        Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@index([personId], name: "fk_User_Person_idx")
  @@index([roleId], name: "fk_User_Role_idx")
}


enum RoleEnum {
  ADMIN
  STUDENT
  TEACHER
  DEPARTMENT_HEAD
  COORDINATOR
}
model Role {
  id            Int @id @default(autoincrement())
  name          RoleEnum  @unique
  users         User[]
} 

model Student {
  id             Int                 @id @default(autoincrement())
  globalAverage  Float?              
  userId         Int                 @unique
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  regionalCenterCareerStudent   RegionalCenter_Career_Student[]
}

model RegionalCenter_Career_Student {
  studentId                Int                 
  regionalCenterCareerId   Int                 
  selected                 Boolean             @default(false)
  student                  Student             @relation(fields: [studentId], references: [id])
  regionalCenterCareer     RegionalCenter_Career @relation(fields: [regionalCenterCareerId], references: [id])

  @@id([studentId, regionalCenterCareerId])
  @@index([studentId], name: "fk_RegionalCenterCareerStudent_Student_idx")
  @@index([regionalCenterCareerId], name: "fk_RegionalCenterCareerStudent_RegionalCenter_idx")
}