// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // o el proveedor de base de datos que est√©s usando
  url      = env("DATABASE_URL")
}


// Aqui van los modelos:
// Modelo Person
model Person {
  id             Int           @id @default(autoincrement())
  dni            String        @unique @db.VarChar(13)
  firstName      String        @db.VarChar(45)
  middleName     String?       @db.VarChar(45)
  lastName       String        @db.VarChar(45)
  secondLastName String?       @db.VarChar(45)
  phoneNumber    String        @db.VarChar(20)
  email          String        @unique @db.VarChar(100)
  inscriptions   Inscription[]
}

// Modelo Career
model Career {
  id              Int                    @id @default(autoincrement())
  name            String                 @db.VarChar(50)
  active          Boolean                @default(true)
  createdAt       DateTime               @default(now()) @db.Date
  description     String?                @db.VarChar(100)
  code            String                 @unique @db.VarChar(45)
  admissionsTests AdmissionTest_Career[]
  inscriptionsPrincipals    Inscription[] @relation("principalCareer")
  inscriptionsSecondaries    Inscription[] @relation("secondaryCareer")
  regionalCentersCareers   RegionalCenter_Career[]

  @@index([id], name: "pk_Career_idx")
}

// Modelo Inscription
model Inscription {
  id                Int      @id @default(autoincrement())
  principalCareerId Int
  secondaryCareerId Int
  photoCertificate  String   @db.VarChar(300)
  date              DateTime @default(now()) @db.Date
  personId          Int
  opinionId         Int?
  principalCareer   Career   @relation("principalCareer", fields: [principalCareerId], references: [id])
  secondaryCareer   Career   @relation("secondaryCareer", fields: [secondaryCareerId], references: [id])
  opinion         Opinion?       @relation(fields: [opinionId], references: [id])
  person            Person   @relation(fields: [personId], references: [id])
  results           Result[]

  @@index([principalCareerId], name: "fk_Inscription_Career1_idx")
  @@index([secondaryCareerId], name: "fk_Inscription_Career2_idx")
  @@index([personId], name: "fk_Inscription_Person1_idx")
}

// Modelo Centro Regional
model RegionalCenter_Career {
  id                 Int         @id @default(autoincrement())
  careerId           Int
  regionalCenterId   Int
  startDate          DateTime    @default(now()) @db.Date
  finalDate          DateTime?
  active             Boolean     @default(true)

  // Indexes
  @@index([regionalCenterId], name: "fk_Career_has_RegionalCenter_RegionalCenter1_idx")
  @@index([careerId], name: "fk_Faculty_has_RegionalCenter_Faculty1_idx")

  // Foreign keys
  career             Career     @relation(fields: [careerId], references: [id])
  regionalCenter     RegionalCenter @relation(fields: [regionalCenterId], references: [id])
}

// Modelo AdmissionTest
model AdmissionTest {
  id                  Int                    @id @default(autoincrement())
  minScoreApprove     Float?
  score               Float
  name                String                 @db.VarChar(75)
  active              Boolean                @default(true)
  code                String                 @db.VarChar(7) @unique
  admissionTestCareers AdmissionTest_Career[]
  results             Result[]
}

// Modelo AdmissionTest_Career
model AdmissionTest_Career {
  id              Int           @id @default(autoincrement())
  admissionTestId Int
  careerId        Int
  active          Boolean @default(true)
  minScore        Float 
  admissionTest   AdmissionTest @relation(fields: [admissionTestId], references: [id])
  career          Career        @relation(fields: [careerId], references: [id])

  @@index([careerId], name: "fk_AdmissionTest_has_Career_Career1_idx")
  @@index([admissionTestId], name: "fk_AdmissionTest_has_Career_AdmissionTest1_idx")
}

// Modelo Opinion
model Opinion {
  id              Int            @id @default(autoincrement())
  message         String         @db.VarChar(90)
  inscriptions    Inscription[]
}

// Modelo Result
model Result {
  inscriptionId   Int
  admissionTestId Int
  score           Float?
  message         String?        @db.VarChar(18)
  date            DateTime?      @db.Date
  inscription     Inscription   @relation(fields: [inscriptionId], references: [id])
  admissionTest   AdmissionTest @relation(fields: [admissionTestId], references: [id])

  @@index([admissionTestId], name: "fk_Inscription_has_AdmissionTest_AdmissionTest1_idx")
  @@index([inscriptionId], name: "fk_Inscription_has_AdmissionTest_Inscription1_idx")

   @@id([inscriptionId, admissionTestId])
}

// Modelo CountryDepartment
model CountryDepartment {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(85)
  towns Town[]
}

// Modelo Town
model Town {
  id                  Int               @id @default(autoincrement())
  name                String            @db.VarChar(100)
  countryDepartmentId Int
  countryDepartment   CountryDepartment @relation(fields: [countryDepartmentId], references: [id])
  regionalCenters     RegionalCenter[]

  @@index([countryDepartmentId], name: "fk_Town_CountryDepartment1_idx")
}

// Modelo RegionalCenter
model RegionalCenter {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(100)
  date              DateTime  @db.Date
  code              String    @db.VarChar(45)
  finalDate         DateTime? @db.Date
  townId            Int
  town              Town      @relation(fields: [townId], references: [id])
  regionalCentersCareer     RegionalCenter_Career[]

  @@index([townId], name: "fk_RegionalCenter_Town1_idx")
}